
-- init_data
-- Set up tables for demo data and populate
-- Also set up trigger to set tenant_id on insert

DROP TABLE IF EXISTS public.widgets;
CREATE TABLE public.widgets (
    id      BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    tenant_id   BIGINT REFERENCES public.tenants ON DELETE CASCADE NOT NULL,
    name    TEXT,
    description TEXT
);
ALTER TABLE public.widgets enable row level security;


DO $$
DECLARE
    tenantA_id BIGINT;
    tenantB_id BIGINT;
BEGIN

-- Get the tenant IDs
SELECT id
INTO tenantA_id
FROM public.tenants
WHERE tenant_name = 'Acme Widgets';

SELECT id
INTO tenantB_id
FROM public.tenants
WHERE tenant_name = 'Widgets''R''Us';

-- Populate demo data
INSERT INTO public.widgets
    (tenant_id, name, description)
VALUES
    (
        tenantA_id,
        'ACME Open-source Matrix',
        'The RSS driver is down, compress the multi-byte system so we can back up the DRAM transmitter!'
    ),
    (
        tenantA_id,
        'ACME Open-source Feed',
        'You can''t program the interface without programming the wireless OCR program!'
    ),
    (
        tenantA_id,
        'ACME Multi-byte Driver',
        'You can''t transmit the capacitor without calculating the wireless AGP sensor!'
    ),
    (
        tenantA_id,
        'ACME Solid State Hard Drive',
        'I''ll hack the cross-platform IP alarm, that should sensor the JBOD panel!'
    ),
    (
        tenantB_id,
        'Widgets''R''Us Solid State Port',
        'You can''t bypass the pixel without programming the mobile SSD system!'
    ),
    (
        tenantB_id,
        'Widgets''R''Us Auxiliary driver',
        'Try to generate the USB sensor, maybe it will quantify the bluetooth bus!'
    ),
    (
        tenantB_id,
        'Widgets''R''Us Digital port',
        'If we generate the transmitter, we can get to the UDP application through the auxiliary SQL hard drive!'
    ),
    (
        tenantB_id,
        'Widgets''R''Us Primary sensor',
        'Use the redundant TLS feed, then you can hack the bluetooth hard drive!'
    );

END $$;



-- Create function/trigger to set tenant_id to match user making the insert request
-- (Insert requests sent from client omit tenant_id, it must be added by this trusted trigger.)
CREATE OR REPLACE FUNCTION set_tenant_id()
    RETURNS TRIGGER
    SET search_path = ''
    SECURITY DEFINER
AS $$
BEGIN
    -- Only apply trigger when INSERT comes from actual users
    -- i.e. don't apply trigger when running SQL directly
    CASE WHEN auth.uid() IS NOT NULL THEN
        NEW.tenant_id := (SELECT tenant_id FROM public.user_tenants WHERE user_id = auth.uid());
    ELSE
        -- Do nothing
    END CASE;

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE TRIGGER on_insert_set_tenant_id
BEFORE INSERT ON public.widgets
FOR EACH row EXECUTE procedure set_tenant_id();